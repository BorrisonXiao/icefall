#!/usr/bin/env bash
# Cihan Xiao 2022

set -eou pipefail

stage=0
stop_stage=100

# We assume dl_dir (download dir) contains the following
# directories and files. If not, they will be downloaded
# by this script automatically.
#
#  - $dl_dir/LibriSpeech
#      You can find BOOKS.TXT, test-clean, train-clean-360, etc, inside it.
#      You can download them from https://www.openslr.org/12
dl_dir=/export/b14/cxiao7/data/download

. shared/parse_options.sh || exit 1

# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}
SECONDS=0

log "dl_dir: $dl_dir"

if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "Stage 0: Download data"

  # Link to the pre-downloaded LibriSpeech corpus
  mkdir -p $dl_dir
  if [ ! -d $dl_dir/LibriSpeech/train-clean-100 ]; then
    ln -sfv /export/corpora5/LibriSpeech $dl_dir/LibriSpeech
  fi

  # Link to the pre-downloaded SEAME corpus
  if [ ! -d $dl_dir/SEAME/data ]; then
    ln -sfv /export/corpora5/LDC/LDC2015S04 $dl_dir/SEAME
  fi

  if [ ! -d $dl_dir/aishell/data_aishell/wav/train ]; then
    mkdir -p $dl_dir/aishell/data_aishell/wav
    mkdir -p $dl_dir/aishell/data_aishell/transcript
    # c07 was so slow so the data is copied to b14
    rsync -avz --bwlimit=200000 --progress --partial /export/c07/sli136/merlion/aishell/train/* $dl_dir/aishell/data_aishell/wav/train
    rsync -avz --bwlimit=200000 --progress --partial /export/c07/sli136/merlion/aishell/aishell_transcript_v0.8.txt $dl_dir/aishell/data_aishell/transcript/aishell_transcript_v0.8.txt
  fi

  if [ ! -d $dl_dir/nsc ]; then
    # Link to the pre-downloaded NSC corpus
    mkdir -p $dl_dir/nsc
    rsync -avz --bwlimit=200000 --progress --partial /export/c07/sli136/merlion/national-speech/* $dl_dir/nsc
  fi

  if [ ! -d $dl_dir/dev ]; then
    # Copy the dev set
    mkdir -p $dl_dir/dev
    rsync -avz --bwlimit=200000 --progress --partial /export/c07/sli136/merlion/merlion-devset/* $dl_dir/dev
  fi

  if [ ! -d $dl_dir/test ]; then
    # Copy the test set
    mkdir -p $dl_dir/test
    rsync -avz --bwlimit=200000 --progress --partial /export/b14/sli136/merlion/Task_1_Eval/* $dl_dir/test
  fi
fi

if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  log "Stage 1: Prepare the manifests"
  if [ ! -f data/manifests/.manifests.done ]; then
    mkdir -p data/manifests
    lhotse prepare merlion $dl_dir data/manifests
    touch data/manifests/.manifests.done
  fi
fi

if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "Stage 2: Compute fbank for merlion sets"
  mkdir -p data/fbank
  if [ ! -e data/fbank/.merlion.done ]; then
    ./local/compute_fbank_merlion.py
    touch data/fbank/.merlion.done
  fi
fi

if [ $stage -le 3 ] && [ $stop_stage -ge 3 ]; then
  log "Stage 3: Prepare phone based lang"
  lang_dir=data/lang_phone
  mkdir -p $lang_dir

  # If you have a pre-processed /path/to/lexicon.txt,
  # you can create a symlink
  #
  #   ln -sfv /path/to/lexicon.txt $lang_dir/lexicon.txt
  #
  if [ ! -f $lang_dir/lexicon.txt ]; then
    ./local/generate_lexicon.py \
      --manifests-dir data/manifests \
      --lexicon $lang_dir/lexicon.raw.txt
  fi

  (
    echo '!SIL SIL'
    echo '<SPOKEN_NOISE> SPN'
    echo '<UNK> SPN'
  ) |
    cat - $lang_dir/lexicon.raw.txt |
    sort | uniq >$lang_dir/lexicon.txt

  if [ ! -f $lang_dir/L_disambig.pt ]; then
    ./local/prepare_lang.py --lang-dir $lang_dir
  fi
fi

if [ $stage -le 4 ] && [ $stop_stage -ge 4 ]; then
  log "Stage 4: Prepare G"
  # We assume you have install kaldilm, if not, please install
  # it using: pip install kaldilm

  lang_dir=data/lang_phone
  lm_dir=data/lm_phone
  mkdir -p $lm_dir

  if [ ! -f $lm_dir/transcript_tokens.txt ]; then
    ./local/transcript_tokens.py \
      --manifests-dir data/manifests \
      --output $lm_dir/transcript_tokens.txt
  fi

  if [ ! -f $lm_dir/G_3_gram.arpa ]; then
    ./shared/make_kn_lm.py \
      -ngram-order 3 \
      -text $lm_dir/transcript_tokens.txt \
      -lm $lm_dir/G_3_gram.arpa
  fi

  if [ ! -f $lm_dir/G_3_gram.fst.txt ]; then
    log "Making kaldilm for $lm_dir/G_3_gram.arpa"
    python3 -m kaldilm \
      --read-symbol-table="$lang_dir/words.txt" \
      --disambig-symbol='#0' \
      --max-order=3 \
      $lm_dir/G_3_gram.arpa >$lm_dir/G_3_gram.fst.txt
  fi

  if [ ! -f $lm_dir/G_4_gram.arpa ]; then
    ./shared/make_kn_lm.py \
      -ngram-order 4 \
      -text $lm_dir/transcript_tokens.txt \
      -lm $lm_dir/G_4_gram.arpa
  fi

  if [ ! -f $lm_dir/G_4_gram.fst.txt ]; then
    log "Making kaldilm for $lm_dir/G_4_gram.arpa"
    python3 -m kaldilm \
      --read-symbol-table="$lang_dir/words.txt" \
      --disambig-symbol='#0' \
      --max-order=4 \
      $lm_dir/G_4_gram.arpa >$lm_dir/G_4_gram.fst.txt
  fi
fi

log "Successfully finished. [elapsed=${SECONDS}s]"
